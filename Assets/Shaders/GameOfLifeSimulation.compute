// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel GameOfLife

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

float Width;
float Height;
sampler2D Input;

[numthreads(8,8,1)]
void GameOfLife(uint3 id : SV_DispatchThreadID)
{
    float2 position = float2((id.x) / Width, (id.y) / Height);
    float2 pixelSize = float2(1.0 / Width, 1.0 / Height);

	float4 currentPixel = tex2Dlod(Input, float4(position.x, position.y, 0, 0));

	float4 neighborPixels = float4(0, 0, 0, 0);
	// +Y
	neighborPixels += tex2Dlod(Input, float4(position.x + pixelSize.x, position.y + pixelSize.y, 0, 0));
	neighborPixels += tex2Dlod(Input, float4(position.x, position.y + pixelSize.y, 0, 0));
	neighborPixels += tex2Dlod(Input, float4(position.x - pixelSize.x, position.y + pixelSize.y, 0, 0));
	// Neutral Y
	neighborPixels += tex2Dlod(Input, float4(position.x + pixelSize.x, position.y, 0, 0));
	neighborPixels += tex2Dlod(Input, float4(position.x - pixelSize.x, position.y, 0, 0));
	// -Y
	neighborPixels += tex2Dlod(Input, float4(position.x + pixelSize.x, position.y - pixelSize.y, 0, 0));
	neighborPixels += tex2Dlod(Input, float4(position.x, position.y - pixelSize.y, 0, 0));
	neighborPixels += tex2Dlod(Input, float4(position.x - pixelSize.x, position.y - pixelSize.y, 0, 0));
	// Add current pixel for reason

	float resultArray[16] = { 0, 0, 1, 1, 0, 0 ,0, 0,    0, 0, 0, 1, 0, 0, 0, 0 };

	float neigh = floor(neighborPixels.r + 0.5);
	float index = (currentPixel.r > 0 ? 0 : 8) + neigh;
	float value = resultArray[index];

	Result[id.xy] = float4(value, value, value, 1);
}
